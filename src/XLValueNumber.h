//// Created by Kenneth Balslev on 29/12/2017.//#ifndef OPENXLEXE_XLNUMBER_H#define OPENXLEXE_XLNUMBER_H//#include <variant>#include <boost/variant.hpp>#include <string>#include "XLCellType.h"#include "XLValue.h"namespace RapidXLSX{    class XLCell;    class XMLNode;//======================================================================================================================//========== XLValueNumber Class ============================================================================================//======================================================================================================================    /**     * @brief     */    class XLValueNumber: public XLValue    {//----------------------------------------------------------------------------------------------------------------------//           Public Member Functions//----------------------------------------------------------------------------------------------------------------------    public:        /**         * @brief         * @param parent         */        explicit XLValueNumber(XLCellValue &parent);        /**         * @brief         * @param numberValue         * @param parent         */        XLValueNumber(long long int numberValue, XLCellValue &parent);        /**         * @brief         * @param numberValue         * @param parent         */        XLValueNumber(long double numberValue, XLCellValue &parent);        /**         * @brief         * @param other         * @todo A copy constructor does not really make sense, as an XLCellValueType object will belong to a specific         * XLCell object. However, a copy constructor is required in order to use the std::variant data structure. A         * solution should be found, that does not require a copy constructor.         */        XLValueNumber(const XLValueNumber &other) = default;        /**         * @brief         * @param other         * @todo A copy constructor does not really make sense, as an XLCellValueType object will belong to a specific         * XLCell object. However, a copy constructor is required in order to use the std::variant data structure. A         * solution should be found, that does not require a copy constructor.         */        XLValueNumber(XLValueNumber &&other) = default;        /**         * @brief         */        ~XLValueNumber() override = default;        /**         * @brief         * @param other         * @return         */        XLValueNumber &operator=(const XLValueNumber &other);        /**         * @brief         * @param other         * @return         */        XLValueNumber &operator=(XLValueNumber &&other) noexcept;        /**         * @brief         * @param numberValue         * @return         */        XLValueNumber &operator=(long long int numberValue);        /**         * @brief         * @param numberValue         * @return         */        XLValueNumber &operator=(long double numberValue);        /**         * @brief         * @param parent         * @return         */        std::unique_ptr<XLValue> Clone(XLCell &parent) override;        /**         * @brief         * @param numberValue         */        void Set(long long int numberValue);        /**         * @brief         * @param numberValue         */        void Set(long double numberValue);        /**         * @brief         * @return         */        long long int Integer() const;        /**         * @brief         * @return         */        long double Float() const;        /**         * @brief         * @return         */        long long int AsInteger() const;        /**         * @brief         * @return         */        long double AsFloat() const;        /**         * @brief         * @return         */        std::string AsString() const override;        /**         * @brief         * @return         */        XLNumberType NumberType() const;        /**         * @brief         * @return         */        XLValueType ValueType() const override;        /**         * @brief         * @return         */        XLCellType CellType() const override;        /**         * @brief         * @return         */        std::string TypeString() const override;//----------------------------------------------------------------------------------------------------------------------//           Private Member Functions//----------------------------------------------------------------------------------------------------------------------    private:        /**         * @brief         * @param numberString         * @return         */        XLNumberType DetermineNumberType(const std::string &numberString) const;//----------------------------------------------------------------------------------------------------------------------//           Private Member Variables//----------------------------------------------------------------------------------------------------------------------    private:        boost::variant<long long int, long double> m_number; /**<  */        XLNumberType m_numberType; /**<  */    };}#endif //OPENXLEXE_XLNUMBER_H